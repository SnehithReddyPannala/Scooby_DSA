class Solution {

    void mergeSort(int arr[], int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }

    void merge(int arr[], int l, int m, int r) {
        int p1 = l;
        int p2 = m + 1;
        int[] temp = new int[r - l + 1];
        int k = 0; // index for temp

        // Merge two halves
        while (p1 <= m && p2 <= r) {
            if (arr[p1] <= arr[p2]) {
                temp[k++] = arr[p1++];
            } else {
                temp[k++] = arr[p2++];
            }
        }

        // Copy remaining elements from left half
        while (p1 <= m) {
            temp[k++] = arr[p1++];
        }

        // Copy remaining elements from right half
        while (p2 <= r) {
            temp[k++] = arr[p2++];
        }

        // Copy temp back to arr
        for (int i = 0; i < temp.length; i++) {
            arr[i+l] = temp[i];
        }
    }
}
