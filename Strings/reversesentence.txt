class Solution {
    public String reverseWords(String s) {
        String[] words = s.split("\\s+");
        StringBuilder res = new StringBuilder();

        for (int i = words.length - 1; i >= 0; i--) {
            res.append(words[i]);
            if (i != 0) {
                res.append(" ");
            }
        }

        return res.toString().trim();
    }
}
//stack based
class Solution {
    public String reverseWords(String s) {
        Stack<String> st = new Stack<>();
        StringBuilder curr = new StringBuilder();
        int n = s.length();

        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            if (ch != ' ') {
                curr.append(ch);
            } else if (curr.length() > 0) {
                st.push(curr.toString());
                curr.setLength(0);
            }
        }

        if (curr.length() > 0) {
            st.push(curr.toString());
        }

        StringBuilder ans = new StringBuilder();
        while (!st.isEmpty()) {
            ans.append(st.pop());
            if (!st.isEmpty()) ans.append(" ");
        }

        return ans.toString();
    }
}
