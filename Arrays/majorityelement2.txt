//brute
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n=nums.length;
        int min=n/3;
        List<Integer>list=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(list.contains(nums[i])){
                continue;
            }
                int count=0;
                for(int j=0;j<n;j++){
                    if(nums[j]==nums[i]){
                        count++;
                    }
                }
                    if(count>min){
                        list.add(nums[i]);
                }
                if(list.size()==2){
                    break;
                }
        }
        return list;
    }
}
//better
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n=nums.length;
        int min=(n/3)+1;
        HashMap<Integer,Integer>map=new HashMap<>();
        List<Integer>list=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i])+1);
            }else{
                map.put(nums[i],1);
            }
            if(map.get(nums[i])==min){
                list.add(nums[i]);
            }
            if(list.size()==2){
                break;
            }
        }
        return list;
    }
}
//optimal
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n=nums.length;
        int min=(n/3);
        int candidate1=0;
        int count1=0;
        int candidate2=0;
        int count2=0;
        List<Integer>list=new ArrayList<>();
        for(int num:nums){
            if(num==candidate1){
                count1++;
            }else if(num==candidate2){
                count2++;
            }else if(count1==0){
                candidate1=num;
                count1=1;
            }else if(count2==0){
                candidate2=num;
                count2=1;
            }else{
                count1--;
                count2--;
            }
        }
        count1=0;
        count2=0;
        for(int num:nums){
            if(num==candidate1){
                count1++;
            }else if(num==candidate2){
                count2++;
            }
        }
        if(count1>min){
            list.add(candidate1);
        }
        if(count2>min){
            list.add(candidate2);
        }
        return list;
    }
}