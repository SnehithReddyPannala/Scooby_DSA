//brute
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>>result=new ArrayList<>();
        int n=nums.length;
        for(int i=0;i<n-3;i++){
            for(int j=i+1;j<n-2;j++){
                HashSet<Long>set=new HashSet<>();
                for(int k=j+1;k<n;k++){
                    long needed=(long)target-(long)nums[i]-(long)nums[j]-(long)nums[k];
                    if(set.contains(needed)){
                        List<Integer> quad=Arrays.asList(nums[i],nums[j],(int)needed,nums[k]);
                        Collections.sort(quad);
                        if(!result.contains(quad)){
                            result.add(quad);
                        }
                    }
                    set.add((long)nums[k]);
                }
            }
        }
            return result;
        }
}
//optimal
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>>result=new ArrayList<>();
        Arrays.sort(nums);
        int n=nums.length;
        for(int i=0;i<n-3;i++){
            if(i>0 && nums[i]==nums[i-1])continue;
            for(int j=i+1;j<n-2;j++){
                if(j>i+1 && nums[j]==nums[j-1])continue;
                int left=j+1;
                int right=n-1;
                while(left<right){
                    long sum=(long)nums[i]+nums[j]+nums[left]+nums[right];
                    if(sum==target){
                        result.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));
                        left++;
                        right--;
                        while(left<right && nums[left]==nums[left-1])left++;
                         while(left<right && nums[right]==nums[right+1])right--;
                    }else if(sum<target){
                        left++;
                    }else{
                        right--;
                    }
                }
            }
        }
            return result;
        }
}