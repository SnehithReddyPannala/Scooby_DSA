//bruteclass Solution {
    public int singleNumber(int[] nums) {
        int n=nums.length;
        for(int i=0;i<n;i++){
             int cnt=0;
            int num=nums[i];
            for(int j=0;j<n;j++){
                if(num==nums[j]){
                    cnt++;
                }
            }
            if(cnt==1)return num;
        }
        return -1;
    }
}
//better
class Solution {
    public int singleNumber(int[] arr) {
        int n=arr.length;
        int maxi=0;
       for(int i=0;i<n;i++){
        maxi=Math.max(maxi,arr[i]);
       }
       int hash[]=new int [maxi+1];
       for(int i=0;i<n;i++){
        hash[arr[i]]++;
       }
       for(int i=0;i<=maxi;i++){
        if(hash[i]==1){
            return i;
        }
       }
       return -1;
    }
}
//optimal with space o(n)
import java.util.HashMap;

class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        // Count frequency of each number
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        // Find the number with frequency 1
        for (int num : map.keySet()) {
            if (map.get(num) == 1) {
                return num;
            }
        }
        
        return -1; // Should never reach here because one unique element is guaranteed
    }
}
//optimal with space o(1)
class Solution {
    int single(int[] arr) {
        // code here
         int xor = 0;
        for (int num : arr) {
            xor ^= num; // XOR each number
        }
        return xor;
    }
}
