class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n=nums.length;
        int[] pos=new int[n/2];
        int[] neg=new int[n/2];
        int[] arr=new int[n];
        int positive=0;
        int negative=0;
        for(int i=0;i<n;i++){
            if(nums[i]>0){
                pos[positive]=nums[i];
                positive++;
            }else{
                neg[negative]=nums[i];
                negative++;
            }
        }
        for(int i=0;i<n/2;i++){
            arr[2*i]=pos[i];
            arr[2*i+1]=neg[i];
        }
        return arr;
    }
}
//optimal
class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n=nums.length;
        int[] ans=new int[n];
        int posIdx=0;
        int negIdx=1;
        for(int i=0;i<n;i++){
            if(nums[i]<0){
                ans[negIdx]=nums[i];
                negIdx+=2;
            }else{
                ans[posIdx]=nums[i];
                posIdx+=2;
            }
        }
        return ans;
    }
}
//for pos!=neg
// User function Template for Java

class Solution {
    void rearrange(ArrayList<Integer> arr) {
        // code here
        int n=arr.size();
        ArrayList<Integer>pos=new ArrayList<>();
        ArrayList<Integer>neg=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(arr.get(i)>=0){
               pos.add(arr.get(i)); 
            }else{
                neg.add(arr.get(i));
            }
        }
        int i=0;
        int p=0;
        int q=0;
        while(p<pos.size() && q<neg.size()){
            arr.set(i++,pos.get(p++));
            arr.set(i++,neg.get(q++));
        }
        while(p<pos.size()){
            arr.set(i++,pos.get(p++));
        }
        while(q<neg.size()){
            arr.set(i++,neg.get(q++));
        }
    }
}