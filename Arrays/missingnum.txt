import java.util.*;
//brute
class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        
        // Check each number from 0 to n
        for (int i = 0; i <= n; i++) {
            int flag = 0;
            for (int j = 0; j < n; j++) {
                if (nums[j] == i) {
                    flag = 1; // Found i in array
                    break;
                }
            }
            if (flag == 0) { // If not found
                return i;
            }
        }
        return -1; // This should never be hit
    }
}
//better
import java.util.*;

class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int[] hash=new int[n+1];
        for(int i=0;i<n;i++){
            hash[nums[i]]++;
        }
        for(int i=0;i<=n;i++){
            if(hash[i]==0){
                return i;
            }
        }
         return -1;
    }
}
//optimal
class Solution {
    int missingNum(int arr[]) {
       int xorAll=0;
       int xorArr=0;
        // code here
        int n=arr.length;
        for(int i=1;i<=n+1;i++){
            xorAll^=i;
        }
        for(int num : arr){
            xorArr^=num;
        }
    return xorAll^xorArr;
    }
}