//brute force
static int LCS(int n,int arr){
    int max=0;
    for(int i=0;i<n;i++){
        int x=arr[i];
        int count=1;
        while(linearSearch(arr,x+1)){
            x=x+1;
            count=count+1;
        }
        max=Math.max(max,count);
    }
    return max;
}
static boolean linearSearch(int[] arr, int target) {
    for (int num : arr) {
        if (num == target) return true;
    }
    return false;
}
//sorting approach better
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
            }
            
            if (n == 0) {
                System.out.println(0);
                continue;
            }
            Arrays.sort(arr);
            int max=0;
            int length=0;
            for(int i=1;i<n;i++){
                if(arr[i]==arr[i-1]+1){
                    length++;
                }else if(arr[i]!=arr[i-1]){
                    length=1;
                }
                max=Math.max(max,length);
            }
        }
    }
    System.out.println(max);
}
 //optimal
 class Solution {
    public int longestConsecutive(int[] nums) {
        int n=nums.length;
    HashSet<Integer>set=new HashSet<>();
        for(int i=0;i<n;i++){
            set.add(nums[i]);
        }
        int max=0;
        int length=0;
        for(int num:set){
            if(!set.contains(num-1)){
                int curr=num;
                 length=1;
                while(set.contains(curr+1)){
                    curr++;
                    length++;
                }
                max=Math.max(max,length);
            }
        }
        return max;
    }
}