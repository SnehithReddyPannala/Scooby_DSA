//brute
class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int n=bloomDay.length;
        int cnt=0;
        int bouq=0;
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            min=Math.min(bloomDay[i],min);
            max=Math.max(bloomDay[i],max);
        }
        for(int i=min;i<=max;i++){
            if(canMake(bloomDay,m,k,i)){
                return i;
            }
        } 
        return -1;      
    }
    private static boolean canMake(int[] arr,int m,int k,int day){
        int cnt=0;
        int bouq=0;
        for(int ele:arr){
            if(ele<=day){
                cnt++;
                if(cnt==k){
                    bouq++;
                    cnt=0;
                }
            }else{
                cnt=0;
            }
        }
        return bouq>=m;
    }
}
//optimal
class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int n=bloomDay.length;
        int cnt=0;
        int bouq=0;
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            min=Math.min(bloomDay[i],min);
            max=Math.max(bloomDay[i],max);
        }
        int low=min;
        int high=max;
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(canMake(bloomDay,m,k,mid)){
                ans=mid;
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return ans;     
    }
    private static boolean canMake(int[] arr,int m,int k,int day){
        int cnt=0;
        int bouq=0;
        for(int ele:arr){
            if(ele<=day){
                cnt++;
                if(cnt==k){
                    bouq++;
                    cnt=0;
                }
            }else{
                cnt=0;
            }
        }
        return bouq>=m;
    }
}